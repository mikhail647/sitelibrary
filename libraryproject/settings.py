"""
Django settings for libraryproject project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# It's highly recommended to set the SECRET_KEY environment variable on PythonAnywhere
# for better security. However, this value will work for now.
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-c$n5kx!s=2p)b8z#a9q@*y+l@r^f!7g=m_x1o0v-w(q#b$t=i') # Generated default

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG = False on PythonAnywhere by setting DJANGO_DEBUG=False env var
DEBUG = os.environ.get('DJANGO_DEBUG', '') != 'False' # Default to True unless DJANGO_DEBUG=False

# Configure this with your PythonAnywhere username
# Example: ALLOWED_HOSTS = ['your-username.pythonanywhere.com']
ALLOWED_HOSTS = ['gods0ft.pythonanywhere.com'] # Keep your existing setting


# Application definition

INSTALLED_APPS = [
    'library.apps.LibraryConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django_select2',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # Add WhiteNoiseMiddleware right after SecurityMiddleware
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'libraryproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'libraryproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# --- START PYTHONANYWHERE DATABASE CONFIG --- 
# Using credentials provided by user
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'gods0ft$default',
        'USER': 'gods0ft',
        'PASSWORD': 'Gods0ft_220507',
        'HOST': 'gods0ft.mysql.pythonanywhere-services.com',
        'PORT': '3306',
        'OPTIONS': {
            # 'init_command': "SET sql_mode='STRICT_TRANS_TABLES'", # Optional, uncomment if needed
            'charset': 'utf8mb4',
        },
    }
}
# --- END PYTHONANYWHERE DATABASE CONFIG ---

# Example for using dj-database-url (install it: pip install dj-database-url)
# Needs environment variable DATABASE_URL set in production
# import dj_database_url
# DATABASES = {
#     # dj_database_url будет искать переменную окружения DATABASE_URL
#     'default': dj_database_url.config()
# }
# # Add your actual production DATABASE_URL from PythonAnywhere/Heroku/etc.
# # DATABASES['default'] = dj_database_url.config(conn_max_age=600, ssl_require=True) # Example for Heroku Postgres


# Tells Django to use our custom user model
AUTH_USER_MODEL = 'library.CustomUser'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Directory where collectstatic will gather static files for deployment
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Additional directories Django should search for static files
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Add WhiteNoise storage backend
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Redirect after login to the home_redirect view
LOGIN_REDIRECT_URL = 'home'

# Redirect after logout to the login page
LOGOUT_REDIRECT_URL = 'login'